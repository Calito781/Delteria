package delteria.repo.items;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.inject.Inject;
import javax.persistence.EntityManager;

import com.google.inject.persist.UnitOfWork;

import delteria.gserver.GServerConnection;
import delteria.gserver.socket.CommunicationException;

public class ItemRepository {

	private EntityManager em;
	private GServerConnection server;
	private UnitOfWork unit;

	@Inject ItemRepository(GServerConnection server, EntityManager em, UnitOfWork unit) {
		this.em = em;
		this.server = server;
		this.unit = unit;
	}
	
	public Item get(String item_id) {
		Item item = em.find(Item.class, item_id);
		
		// If we don't have the item cached, load it from the server
		if (item == null) {
			unit.begin();
			try {
				item = loadFromGame(item_id);
				if (item != null) {
					em.persist(item);
				}
			} finally {
				unit.end();
			}
		}
		
		return item;
	}
	
	public List<String> getAll() {
		List<String> items = new ArrayList<String>();
		try {
			Future<List<ItemReference>> future_item_list = server.requestItems();
			List<ItemReference> item_list = future_item_list.get(10, TimeUnit.SECONDS);
			for (ItemReference item: item_list) {
				items.add(item.getItemId());
			}
		} catch (CommunicationException e) {
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
		} catch (ExecutionException e) {
		} catch (TimeoutException e) {
		}
		return items;
	}

	private Item loadFromGame(String item_id) {
		Item item = null;
		Future<Item> future_item = null;
		try {
			future_item = server.requestItem(item_id);
			item = future_item.get(10, TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			future_item.cancel(true);
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
		} catch (CommunicationException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}

		return item;
	}
}
