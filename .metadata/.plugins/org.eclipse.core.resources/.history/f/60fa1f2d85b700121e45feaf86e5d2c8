package delteria.gserver.commands;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;

import delteria.concurrent.FutureValue;
import delteria.gserver.CommunicationListener;
import delteria.gserver.GServerConnection;
import delteria.gserver.socket.CommunicationException;
import delteria.repo.card.Card;

public class CommandRequestCard implements Command<Card> {

	private final String account;

	public CommandRequestCard(String account) {
		this.account = account;
	}

	@Override
	public Future<Card> sendCommand(GServerConnection connection) throws CommunicationException {
		JsonArray command = new JsonArray();
		command.add(new JsonPrimitive("card"));
		command.add(new JsonPrimitive(account));
		
		FutureValue<Card> future_value = new FutureValue<Card>();
		connection.addListener(new Listener(future_value));
		connection.sendCommand(command);
		
		return future_value;
	}
	

	private class Listener implements CommunicationListener {
		
		private final FutureValue<Card> future_value;

		public Listener(FutureValue<Card> future_value) {
			this.future_value = future_value;
		}

		@Override
		public void onReceivedMessage(JsonElement message) {
			if (!(message instanceof JsonArray))
				return;
			JsonArray command = (JsonArray) message;
			if ("card".equals(command.get(0).getAsString()) &&
					account.equals(command.get(1).getAsString())) {

				Map<String, String> colorMap = new HashMap<String, String>();
				JsonArray colors = command.get(8).getAsJsonArray();
				colorMap.put("skin", colors.get(0).getAsString());
				colorMap.put("sleeves", colors.get(2).getAsString());
				colorMap.put("shoes", colors.get(3).getAsString());
				colorMap.put("coat", colors.get(1).getAsString());
				colorMap.put("belt", colors.get(4).getAsString());

				Card card = new Card(
					command.get(2).getAsString(),
					command.get(3).getAsInt() == 1,
					command.get(4).getAsLong(),
					command.get(5).getAsString(),
					command.get(6).getAsString(),
					command.get(7).getAsString(),
					colorMap
				);
				
				future_value.set(card);
			}
		}

		@Override
		public boolean isExpired() {
			return future_value.isCancelled() || future_value.isDone();
		}
	}
}