package delteria.repo.card;

import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import delteria.gserver.GServerConnection;
import delteria.gserver.socket.CommunicationException;

@Stateless
public class CardRepository {
	
	@Inject GServerConnection server;
	
	@PersistenceContext(unitName="myPU")
	EntityManager em;

	public Card get(String account) {
		return loadFromGame(account);
	}

	private Card loadFromGame(String account) {
		Card card = em.find(Card.class, account);
		if (card != null) {
			if (card.expiry_date.before(new Date())) {
				card = null; // expired!
			}
		}

		if (card == null) {
			Future<Card> future_card = null;
			try {
				future_card = server.requestCard(account);
				card = future_card.get(10, TimeUnit.SECONDS);
				card = em.merge(card);
			} catch (TimeoutException e) {
				future_card.cancel(true);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			} catch (CommunicationException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}
		}

		return card;
	}
}
