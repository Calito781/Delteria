package delteria.repo.card;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.inject.Inject;

import delteria.gserver.GServerConnection;
import delteria.gserver.socket.CommunicationException;

public class CardRepository {
	
	@Inject GServerConnection server;

	public Card get(String account) {
		return loadFromGame(account);
	}

	private Card loadFromGame(String account) {
		Card card = null;
		Future<Card> future_card = null;
		try {
			future_card = server.requestCard(account);
			card = future_card.get(10, TimeUnit.SECONDS);
		} catch (TimeoutException e) {
			future_card.cancel(true);
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
		} catch (CommunicationException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}

		return card;
	}
}
