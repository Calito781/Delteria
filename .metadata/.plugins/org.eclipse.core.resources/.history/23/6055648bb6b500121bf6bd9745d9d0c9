package delteria.gserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

import javax.inject.Inject;
import javax.inject.Provider;

public class AlwaysAliveSocket {

	private final Provider<Socket> socket_provider;

	@Inject AlwaysAliveSocket(Provider<Socket> socketProvider) {
		this.socket_provider = socketProvider;
	}
	
	public String read() throws CommunicationException {
		int retry_count = 0;
		do {
			Socket socket = socket_provider.get();
			try {
				BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				
				String line = reader.readLine();
				if (line == null) {
					socket.close();
				} else {
					return line;
				}
			} catch (IOException e) {
				try {
					socket.close();
				} catch (IOException eClose) {
					throw new CommunicationException(eClose);
				}
			}
		} while (retry_count ++ < 5);
		
		throw new CommunicationException(null);
	}
	
	public void write(String packet) throws CommunicationException {
		int retry_count = 0;
		do {
			Socket socket = socket_provider.get();
	
			try {
				socket.getOutputStream().write(packet.getBytes());
				socket.getOutputStream().flush();
				return;
			} catch (IOException e) {
				try {
					socket.close();
				} catch (IOException eClose) {
					throw new CommunicationException(e);
				}
			}
		} while (retry_count ++ < 5);

		throw new CommunicationException(null);
	}
}
