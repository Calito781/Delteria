package delteria.web.card;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.inject.Inject;

import delteria.repo.card.Card;
import delteria.repo.file.File;
import delteria.repo.file.FileRepository;

public class CharacterRenderer {
	private static final int WIDTH = 46;
	private static final int HEIGHT = 64;

	@Inject FileRepository files;
	
	public Image render(Card card) throws IOException {
		BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_4BYTE_ABGR);

		Graphics graphics = image.getGraphics();

		// Generate Body
		File body_file = files.get(card.body);
		Image body_image_source = ImageIO.read(new ByteArrayInputStream(body_file.content));
		
		ImageFilter body_filter = new BodyImageFilter(card.colors);
		Image body_image = new Canvas().createImage(new FilteredImageSource(body_image_source.getSource(), body_filter));

		// Generate Head
		File head_file = files.get(card.head);
		Image head_image =ImageIO.read(new ByteArrayInputStream(head_file.content));
		
		File hat_file = files.get(card.hat);
		Image hat_image = ImageIO.read(new ByteArrayInputStream(hat_file.content));
		
		drawImage(graphics, body_image, 8, 32, 32 * 2, 0, 32, 32);
		drawImage(graphics, head_image, 8, 18, 0, 32*2, 32, 32);
		drawImage(graphics, hat_image, 0, 0, 48 * 2, 0, 48, 48);

		return image;
	}

	private void drawImage(Graphics graphics, Image image, int dx, int dy, int sx,
			int sy, int width, int height) {
		graphics.drawImage(image, dx, dy, dx + width, dy + height, sx, sy, sx + width, sy + height, null);
	}
}
