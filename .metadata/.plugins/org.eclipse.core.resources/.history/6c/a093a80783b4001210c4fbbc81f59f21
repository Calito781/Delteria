package delteria.concurrent;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class FutureValue<T> implements Future<T> {

	private volatile boolean cancelled = false;
	private volatile boolean done = false;
	private T value = null;

	@Override
	public boolean cancel(boolean mayInterruptIfRunning) {
		if (isDone()) {
			return false;
		} else {
			cancelled = true;
			return true;
		}
	}

	@Override
	public T get() {
		while (! done) {
			Thread.yield();
		}
		
		return value;
	}

	@Override
	public T get(long timeout, TimeUnit unit) throws InterruptedException,
			ExecutionException, TimeoutException {
		long timeout_time = System.currentTimeMillis() + unit.convert(timeout, TimeUnit.MILLISECONDS);
		
		while (! done) {
			if (System.currentTimeMillis() > timeout_time) {
				throw new TimeoutException();
			}
			
			Thread.yield();
		}

		return value;
	}

	@Override
	public boolean isCancelled() {
		return cancelled;
	}

	@Override
	public boolean isDone() {
		return done;
	}
	
	public void set(T value) {
		this.value = value;
		done = true;
	}
}
